"""Allow agent_action to be nullable

Revision ID: c89f9badd539
Revises: a65bad92be5e
Create Date: 2025-06-07 17:50:32.789856

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'c89f9badd539'
down_revision: Union[str, None] = 'a65bad92be5e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Make agent_action column nullable
    op.alter_column('memory_events', 'agent_action',
               existing_type=sa.TEXT(),
               nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Restore agent_action column to NOT NULL constraint
    op.alter_column('memory_events', 'agent_action',
               existing_type=sa.TEXT(),
               nullable=False)
    # ### end Alembic commands ###
    op.create_index(op.f('ix_plans_id'), 'plans', ['id'], unique=False)
    op.create_table('copilot_interactions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('file_path', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('prompt', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('copilot_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('applied', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('copilot_interactions_pkey'))
    )
    op.create_index(op.f('idx_copilot_interactions_timestamp'), 'copilot_interactions', ['timestamp'], unique=False)
    op.create_table('actions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('actions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('goal_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', postgresql.ENUM('MOUSE', 'KEYBOARD', 'TERMINAL', 'VISION', name='actiontype'), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['goal_id'], ['goals.id'], name='actions_goal_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='actions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_actions_id'), 'actions', ['id'], unique=False)
    op.create_table('plan_steps',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('plan_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['plan_id'], ['plans.id'], name=op.f('plan_steps_plan_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('plan_steps_pkey'))
    )
    op.create_index(op.f('ix_plan_steps_id'), 'plan_steps', ['id'], unique=False)
    op.create_table('goals',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('goals_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('status', postgresql.ENUM('PENDING', 'IN_PROGRESS', 'COMPLETED', 'FAILED', 'CANCELLED', name='goalstatus'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='goals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_goals_id'), 'goals', ['id'], unique=False)
    op.create_table('action_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('parameters', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('action_logs_pkey'))
    )
    op.create_index(op.f('idx_action_logs_timestamp'), 'action_logs', ['timestamp'], unique=False)
    op.create_table('workflow_runs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('workflow_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('start_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('error_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('workflow_runs_pkey'))
    )
    op.create_index(op.f('idx_workflow_runs_name'), 'workflow_runs', ['workflow_name'], unique=False)
    op.create_table('agent_memory',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('agent_memory_pkey')),
    sa.UniqueConstraint('key', name=op.f('agent_memory_key_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_agent_memory_key'), 'agent_memory', ['key'], unique=False)
    op.create_table('vision_snapshots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('action_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('ocr_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['action_id'], ['actions.id'], name=op.f('vision_snapshots_action_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('vision_snapshots_pkey'))
    )
    op.create_index(op.f('ix_vision_snapshots_id'), 'vision_snapshots', ['id'], unique=False)
    # ### end Alembic commands ###
